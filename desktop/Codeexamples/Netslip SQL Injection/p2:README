The most prominent loophole of problem two was the fact that the SQL was not escaped properly. Thus an attacker could easily close off the SQL using a HTTP Request and add their own code in SQL to gain access the to database and the information inside. This was especially easy because the data wasn't even encrypted. I fixed it by modifying the movie controller, which I've attached. The part where the controller accesses the SQL query, I am sure to escape it by using this notation "genre = ?", genre, where the second genre is the parameters where the hacker previously wanted to use to inject their SQL.